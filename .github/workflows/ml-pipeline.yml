name: Azure ML Pipeline - Feature Store, Training & Registration

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'scripts/**'
      - 'azureml_*.py'
      - 'data_preprocessing.py'
      - 'requirements.txt'
      - '.github/workflows/ml-pipeline.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'azureml_*.py'
      - 'data_preprocessing.py'
      - 'requirements.txt'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      skip_data_upload:
        description: 'Skip data upload step'
        required: false
        default: false
        type: boolean
      force_retrain:
        description: 'Force model retraining'
        required: false
        default: false
        type: boolean

env:
  AZURE_ML_WORKSPACE: ${{ secrets.AZURE_ML_WORKSPACE }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  PYTHON_VERSION: "3.9"

jobs:
  setup:
    name: Setup and Validate
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      config-file: ${{ steps.set-env.outputs.config-file }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set environment variables
      id: set-env
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
        echo "config-file=config.${{ steps.set-env.outputs.environment || 'dev' }}.json" >> $GITHUB_OUTPUT

    - name: Validate Azure credentials
      run: |
        if [ -z "${{ env.AZURE_SUBSCRIPTION_ID }}" ] || [ -z "${{ env.AZURE_RESOURCE_GROUP }}" ] || [ -z "${{ env.AZURE_ML_WORKSPACE }}" ]; then
          echo "❌ Missing required Azure environment variables"
          echo "Please set: AZURE_SUBSCRIPTION_ID, AZURE_RESOURCE_GROUP, AZURE_ML_WORKSPACE"
          exit 1
        fi
        echo "✅ Azure environment variables validated"

  generate-data:
    name: Generate Mock Data
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy scikit-learn

    - name: Generate mock data
      run: python generate_mock_data.py

    - name: Upload data artifacts
      uses: actions/upload-artifact@v4
      with:
        name: raw-data
        path: data/
        retention-days: 7

  preprocess-data:
    name: Preprocess Data
    runs-on: ubuntu-latest
    needs: generate-data
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download data artifacts
      uses: actions/download-artifact@v4
      with:
        name: raw-data
        path: data/

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy scikit-learn joblib

    - name: Preprocess data
      run: python data_preprocessing.py

    - name: Upload processed data
      uses: actions/upload-artifact@v4
      with:
        name: processed-data
        path: |
          processed_data/
          models/
        retention-days: 7

  feature-store:
    name: Manage Feature Store
    runs-on: ubuntu-latest
    needs: [setup, preprocess-data]
    if: github.event.inputs.skip_data_upload != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download processed data
      uses: actions/download-artifact@v4
      with:
        name: processed-data
        path: ./

    - name: Install Azure ML dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create config file
      run: |
        cat > config.json << EOF
        {
          "azure_ml": {
            "subscription_id": "${{ env.AZURE_SUBSCRIPTION_ID }}",
            "resource_group": "${{ env.AZURE_RESOURCE_GROUP }}",
            "workspace_name": "${{ env.AZURE_ML_WORKSPACE }}",
            "region": "eastus"
          },
          "feature_store": {
            "feature_group_name": "loan-approval-features-${{ needs.setup.outputs.environment }}",
            "feature_group_version": "${{ github.run_number }}",
            "description": "Loan approval features for ${{ needs.setup.outputs.environment }} environment"
          },
          "pipeline_settings": {
            "use_azure_ml": true,
            "deploy_endpoint": false,
            "continue_on_failure": false
          }
        }
        EOF

    - name: Create and populate feature store
      run: python azureml_feature_store.py --create-feature-group --upload-features

    - name: Upload feature store artifacts
      uses: actions/upload-artifact@v4
      with:
        name: feature-store-${{ needs.setup.outputs.environment }}
        path: |
          feature_store_info.json
        retention-days: 30

  train-model:
    name: Train Model on Azure ML
    runs-on: ubuntu-latest
    needs: [setup, feature-store]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download processed data
      uses: actions/download-artifact@v4
      with:
        name: processed-data
        path: ./

    - name: Download feature store info
      uses: actions/download-artifact@v4
      with:
        name: feature-store-${{ needs.setup.outputs.environment }}
        path: ./
      continue-on-error: true

    - name: Install Azure ML dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create training config
      run: |
        cat > config.json << EOF
        {
          "azure_ml": {
            "subscription_id": "${{ env.AZURE_SUBSCRIPTION_ID }}",
            "resource_group": "${{ env.AZURE_RESOURCE_GROUP }}",
            "workspace_name": "${{ env.AZURE_ML_WORKSPACE }}",
            "region": "eastus"
          },
          "compute": {
            "training_compute": "cpu-cluster-${{ needs.setup.outputs.environment }}",
            "training_vm_size": "STANDARD_DS3_V2",
            "inference_vm_size": "Standard_DS2_v2"
          },
          "experiment": {
            "experiment_name": "loan-approval-experiment-${{ needs.setup.outputs.environment }}",
            "model_name": "loan-approval-model-${{ needs.setup.outputs.environment }}",
            "run_id": "${{ github.run_number }}-${{ github.sha }}"
          },
          "model_hyperparameters": {
            "model_type": "random_forest",
            "n_estimators": 100,
            "max_depth": 10,
            "random_state": 42
          },
          "pipeline_settings": {
            "use_azure_ml": true,
            "deploy_endpoint": false,
            "continue_on_failure": false
          }
        }
        EOF

    - name: Create compute cluster
      run: python azureml_training.py --create-compute --config config.json
      continue-on-error: true

    - name: Upload training data to Azure ML
      run: python azureml_training.py --upload-data --config config.json

    - name: Submit training job
      id: training
      run: |
        python azureml_training.py --submit-job --config config.json
        
        # Check if job was successfully submitted
        if [ -f "artifacts/last_training_job.json" ]; then
          # Extract job name from output
          JOB_NAME=$(python -c "import json; print(json.load(open('artifacts/last_training_job.json')).get('job_name', '') if __import__('os').path.exists('artifacts/last_training_job.json') else '')")
          echo "job-name=$JOB_NAME" >> $GITHUB_OUTPUT
          echo "training-mode=azure" >> $GITHUB_OUTPUT
          echo "✅ Azure ML job submitted: $JOB_NAME"
        else
          echo "job-name=" >> $GITHUB_OUTPUT
          echo "training-mode=local" >> $GITHUB_OUTPUT
          echo "ℹ️ Training ran locally (job submission failed)"
        fi

    - name: Wait for training completion
      if: steps.training.outputs.training-mode == 'azure' && steps.training.outputs.job-name != ''
      run: python azureml_training.py --wait-for-completion --job-name ${{ steps.training.outputs.job-name }} --config config.json
      timeout-minutes: 60

    - name: Skip Azure ML job waiting (local training)
      if: steps.training.outputs.training-mode == 'local'
      run: |
        echo "ℹ️ Skipping Azure ML job completion wait - training ran locally"
        echo "Local training artifacts should already be available"

    - name: Prepare artifacts for upload
      run: |
        echo "📦 Preparing training artifacts for upload..."
        mkdir -p artifacts models
        ls -la artifacts/ || echo "No artifacts directory"
        ls -la models/ || echo "No models directory" 
        echo "Content check complete"
    
    - name: Upload training artifacts
      uses: actions/upload-artifact@v4
      with:
        name: training-job-${{ needs.setup.outputs.environment }}-${{ github.run_number }}
        path: |
          artifacts/
          models/
          config.json
        retention-days: 30

  register-model:
    name: Register Model
    runs-on: ubuntu-latest
    needs: [setup, train-model]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download training artifacts
      uses: actions/download-artifact@v4
      with:
        name: training-job-${{ needs.setup.outputs.environment }}-${{ github.run_number }}
        path: ./

    - name: Debug downloaded artifacts
      run: |
        echo "🔍 Checking downloaded artifacts..."
        pwd
        ls -la
        echo "📁 Artifacts directory:"
        ls -la artifacts/ || echo "No artifacts directory"
        echo "🤖 Models directory:"  
        ls -la models/ || echo "No models directory"
        echo "📄 Config file:"
        ls -la config.json || echo "No config.json"
        echo "Debug complete"

    - name: Install Azure ML dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Register model
      id: register
      run: |
        # Check if we have an Azure ML job or local training artifacts
        if [ -f "artifacts/last_training_job.json" ]; then
          # Azure ML job registration
          JOB_NAME=$(python -c "import json; print(json.load(open('artifacts/last_training_job.json')).get('job_name', '') if __import__('os').path.exists('artifacts/last_training_job.json') else '')")
          
          if [ -n "$JOB_NAME" ]; then
            echo "🚀 Registering model from Azure ML job: $JOB_NAME"
            python azureml_model_registry.py --register-from-job $JOB_NAME --config config.json
          else
            echo "❌ No job name found in artifacts"
            exit 1
          fi
        elif [ -f "models/model.pkl" ]; then
          # Local training registration  
          echo "🏠 Registering model from local training artifacts"
          python azureml_model_registry.py --register-from-local --config config.json
        else
          echo "❌ No training artifacts found (neither Azure ML job nor local model)"
          exit 1
        fi
        
        # Get registered model info
        MODEL_INFO=$(python -c "import json; print(f\"{json.load(open('artifacts/registered_model.json')).get('name', '')}:{json.load(open('artifacts/registered_model.json')).get('version', '')}\" if __import__('os').path.exists('artifacts/registered_model.json') else '')")
        echo "model-info=$MODEL_INFO" >> $GITHUB_OUTPUT

    - name: Update model tags
      run: |
        python azureml_model_registry.py --add-tags \
          --model-info ${{ steps.register.outputs.model-info }} \
          --tags environment=${{ needs.setup.outputs.environment }} \
          --tags git_commit=${{ github.sha }} \
          --tags git_branch=${{ github.ref_name }} \
          --tags run_number=${{ github.run_number }} \
          --tags build_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          --config config.json


    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: registered-model-${{ needs.setup.outputs.environment }}-${{ github.run_number }}
        path: |
          artifacts/registered_model.json
        retention-days: 90

  model-quality-check:
    name: Model Quality Validation
    runs-on: ubuntu-latest
    needs: [setup, register-model]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: registered-model-${{ needs.setup.outputs.environment }}-${{ github.run_number }}
        path: ./

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Run model validation
      run: python azureml_model_validation.py --config config.json

    - name: Check model performance thresholds
      run: |
        python -c "import json,sys; metrics=json.load(open('artifacts/model_metrics.json')); acc=metrics.get('val_accuracy',0); auc=metrics.get('val_auc',0); print(f'Model Performance: Accuracy {acc:.4f}, AUC {auc:.4f}'); sys.exit(1) if acc<0.80 else (sys.exit(1) if auc<0.75 else print('✅ Model quality validation passed'))" 2>/dev/null || echo "⚠️ Model validation skipped - metrics file not found"


  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [setup, train-model]
    if: always()
    
    steps:
    - name: Cleanup old compute instances
      run: |
        echo "Note: Manual cleanup of Azure ML compute instances may be required"
        echo "Consider implementing automatic cleanup of compute instances older than 24 hours"

    - name: Cleanup old model versions
      run: |
        echo "Note: Consider implementing cleanup of old model versions in non-production environments"